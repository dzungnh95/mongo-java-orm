#summary MQL MJORM Query Langauge
#labels Featured,Phase-Implementation

<g:plusone size="medium"></g:plusone>

= Introduction =

This page describes the MQL language.  For information on how to use MQL see the MJORM home page, api documentation and\or {{{Statement}}} interface.

= Table of contents =
<wiki:toc />

= MJORM Query Language =
MJORM Query Language (or MQL - pronounced "Michael") allows for SQL (Structured Query Language) like querying of a MongoDB database.  An MQL query can contain many commands separated by a semi colon.

== Command ==
An MQL command has the following structure:

{{{
FROM
   collection_name
   [WHERE 
     condition [, condition ...]]
   action
}}}

  * _collection_name_ is the name of the collection that is being operated on.
  * _condition_ is a query condition that must be met
  * _action_ is the action to perform on the documents in the collection specified that match the specified conditions (or all documents if no conditions are specified)

=== Variable literals ===
Variable literals used in MQL come in the following flavors:
|| *type* || *example* ||
|| parameter || :parameterName, ? ||
|| regular expression || /expression/ ||
|| string || 'a value', "double quoted as well" ||
|| boolean || true, false ||
|| integer || 1, -1, 200 ||
|| decimal || 1.1, -2.3, 234.64 ||
|| hex number || 0xfe01, 0xA2 ||
|| array || [1, 2, 3], ['hello', 'world'], [[1,2], ['multi', 'dimensional']] ||
|| function || date('2012-01-01 00:00:01'), now() ||

==== functions ====
Functions that provide values as variable literals are easily added to MQL.  By default the following functions are available:

|| *name* || *arguments* || *return* || *description ||
|| now() || none || Date || returns the current date and time ||
|| date(...) || long or string || Date || Returns the date and time represented by the value passed to it ||

=== Conditions ===
Conditions are optionally separated by a comma.  There are 3 types of query conditions: field comparison, field function and document function.  Because MQL queries are essentially converted to a {{{DBObject}}} query they still suffer from the same limitations as the traditional query approach for fields in that a field may be only used once for comparisons, but may sometimes be used multiple times for functions.  This limitation may be lifted at some point if MJORM uses a lower level BSON protocol for querying MongoDB (in BSON, it's perfectly acceptable to use the same field on an object twice - but because the 10gen library's {{{DBObject}}} uses a {{{Map}}} this is impossible without trickery and violation of the {{{Map}}} interface's contract).

=== field comparison conditions ===
MQL supports the following field comparison operators:
|| *operator* || *name* ||
|| > || greater than ||
|| >= || greater than or equal ||
|| < || less than ||
|| <= || less than or equal ||
|| != || not equal ||
|| <> || not equal ||
|| =~ || regular expression matching ||

{{{
FROM
   collection_name
   WHERE
       age > 10
       height >= 12
       weight < 150
       length <= 25
       name != "Jalopy"
       size <> 15
       description =~ /^Distance: [0-9]+/
   action
}}}

=== field function conditions ===
Field function conditions generally perform some sort of operation on a field not possible with a simple comparision.  MQL supports the following field function conditions:
|| *name* || *description* ||
|| exists || checks for the presence of the field ||
|| not_exists || checks for the absence of a field ||
|| between || checks to see if a field is between a specific range ||
|| elemMatch || performs an [http://www.mongodb.org/display/DOCS/Advanced+Queries $elemMatch] ||
|| mod || performs an [http://www.mongodb.org/display/DOCS/Advanced+Queries $mod] ||
|| size || checks the size of the field ||
|| type || checks the [http://www.mongodb.org/display/DOCS/Advanced+Queries type] of the field ||
|| in || checks that the field contains one of the values specified ||
|| nin || checks that the field doesn't contain any of the values specified ||
|| all || checks that the field contains all of the values specified ||

{{{
FROM
   collection_name
   WHERE
       age exists()
       height not_exists()
       weight between(150, 175)
       author elemMatch(firstName='john', lastName='doe')
       name mod(1, 2)
       tags size(10)
       whatever type(10)
       names in('john', 'jacob', 'jingleheimer')
       somethingElse nin('a value', 10)
       otherTags all('fun', 'intersting')
   action
}}}

=== field condition negation ===
field function conditions and field comparison conditions can be negated with the {{{NOT}}} keyword.

{{{
FROM
   collection_name
   WHERE
       not age > 10
       not name =~ /something/
   action
}}}

=== document function conditions ===
Document functions define conditions that are used on the document as a whole or contain field conditions.  The following document functions are available:
|| *name* || *description* ||
|| or || performs an [http://www.mongodb.org/display/DOCS/Advanced+Queries $or] ||
|| nor || performs a [http://www.mongodb.org/display/DOCS/Advanced+Queries $nor] ||
|| and || performs an [http://www.mongodb.org/display/DOCS/Advanced+Queries $and] ||
|| predicate || enables the use of a javascript for a [http://www.mongodb.org/display/DOCS/Advanced+Queries $where] statement ||

{{{
FROM
   collection_name
   WHERE
       or(x=1, y=2, name='jets')
       nor(a=1, b=3, name=~ /whatever/)
       and(h=1, i=2, name in(10, 1, 3))
       predicate('this.x > 2 && this.y * 2 == 14');
   action
}}}

== Actions ==
An MQL query is not complete with an action.  The following actions are supported:
  * select - query for documents
  * explain - return a document with a query execution plan
  * delete - delete documents
  * update - update documents
  * find and modify - modify documents and return them
  * find and delete - delete objects and return them

=== explain ===
Explain is the most simple action and has the following structure:

{{{
FROM
   collection_name
   [WHERE 
     condition [, condition ...]]
   EXPLAIN
   [hint]
}}}

An explain query merely returns a {{{DBObject}}} containing the query execution plan as defined by the database.  Hints are used to give the database hints as to which indexes to use and are defined in greater detail in the Common Constructs section of this document.

example:
{{{
FROM
   collection_name
   WHERE size > 10
   EXPLAIN
}}}

=== select ===
Select is used to return documents from the database and has the following structure:

{{{
FROM
   collection_name
   [WHERE 
     condition [, condition ...]]
   SELECT { * | field_name [, field_name ...] }
   [hint]
   [sort]
   [limit]
}}}

example:
{{{
FROM
   collection_name
   WHERE
        size > 10
        name = 'duder'
   SELECT name, size, dateCreated
   HINT dateCreated
   SORT dateCreated ASC
   LIMIT 15, 100
}}}

or at a bare minumum:
{{{
FROM collection_name SELECT *
}}}

=== delete ===
TODO: document

=== update ===
TODO: document

=== find and modify ===
TODO: document

=== find and delete ===
TODO: document

== Common constructs ==
Some query constructs are used across many actions.

=== hints ===
Hints are used to help the database determine the best index to use when querying and have the following structure:

{{{
HINT {NATURAL [ASC | DESC] | index_name [ASC | DESC] | field [ASC | DESC] [, field [ASC | DESC]...]}] 
}}}

natural:
{{{
FROM
   collection_name
   WHERE x=1
   SELECT *
   HINT NATURAL
}}}

by name:
{{{
FROM
   collection_name
   WHERE x=1
   SELECT *
   HINT 'name_1_dateUpdated_1'
}}}

by field(s):
{{{
FROM
   collection_name
   WHERE x=1
   SELECT *
   HINT name ASC, dateUpdated DESC
}}}

=== sorting ===
Sorting changes the order in which documents are returned (or modified depending on the action)

{{{
SORT field_name [, field_name ...]
}}}

{{{
FROM
   collection_name
   WHERE x=1
   SELECT *
   SORT name ASC, age DESC
}}}

=== pagination\limit ===
Pagination limits the number of documents returned or affected by a query and has the following structure:

{{{
LIMIT {max | start, max}
}}}

Note: start and max may be integers or parameters.

first 10:
{{{
FROM
   collection_name
   WHERE x=1
   SELECT *
   LIMIT 10
}}}

document 10 through 25:
{{{
FROM
   collection_name
   WHERE x=1
   SELECT *
   LIMIT 10, 15
}}}