#summary MQL MJORM Query Langauge

<g:plusone size="medium"></g:plusone>

= Introduction =

This page describes the MQL language.  For information on how to use MQL see the MJORM home page, api documentation and\or {{{Statement}}} interface.

= Table of contents =
<wiki:toc />


= MJORM Query Language =
MJORM Query Language (or MQL - pronounced "Michael") allows for SQL (Structured Query Language) like querying of a MongoDB database.  An MQL query can contain many commands separated by a semi colon.

== Command ==
An MQL command has the following structure:

{{{
FROM
   collection_name
   [WHERE 
     condition [, condition ...]]
   action
}}}

  * _collection_name_ is the name of the collection that is being operated on.
  * _condition_ is a query condition that must be met
  * _action_ is the action to perform on the documents in the collection specified that match the specified conditions (or all documents if no conditions are specified)

=== Conditions ===
Conditions are optionally separated by a comma.  There are 3 types of query conditions: field comparison, field function and document function:

=== field comparison conditions ===
MQL supports the following field comparison operators:
  * > - greater than
  * >= - greater than or equal
  * < - less than
  * <= - less than or equal
  * != - not equal
  * <> - not equal
  * =~ - regular expression matching

{{{
FROM
   collection_name
   WHERE
       age > 10
       height >= 12
       weight < 150
       length <= 25
       name != "Jalopy"
       size <> 15
       description =~ /^Distance: [0-9]+/
   action
}}}

=== field function conditions ===
Field function conditions generally perform some sort of operation on a field not possible with a simple comparision.  MQL supports the following field function conditions:
  * exists - checks for the presence of the field
  * not_exists - checks for the absence of a field
  * between - checks to see if a field is between a specific range
  * elemMatch - performs an [http://www.mongodb.org/display/DOCS/Advanced+Queries $elemMatch]
  * mod - performs an [http://www.mongodb.org/display/DOCS/Advanced+Queries $mod]
  * size - checks the size of the field
  * type - checks the [http://www.mongodb.org/display/DOCS/Advanced+Queries type] of the field
  * in - checks that the field contains one of the values specified
  * nin - checks that the field doesn't contain any of the values specified
  * all - checks that the field contains all of the values specified

{{{
FROM
   collection_name
   WHERE
       age exists()
       height not_exists()
       weight between(150, 175)
       author elemMatch(firstName='john', lastName='doe')
       name mod(1, 2)
       tags size(10)
       whatever type(10)
       names in('john', 'jacob', 'jingleheimer')
       somethingElse nin('a value', 10)
       otherTags all('fun', 'intersting')
   action
}}}

=== field condition negation ===
field function conditions and field comparison conditions can be negated with the {{{NOT}}} keyword.

{{{
FROM
   collection_name
   WHERE
       not age > 10
       not name =~ /something/
   action
}}}

=== document functions ===
Document functions define conditions that are used on the document as a whole, the following document functions are available: